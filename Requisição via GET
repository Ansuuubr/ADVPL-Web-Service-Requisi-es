#INCLUDE 'totvs.ch'  //classes importadas do proprio totvs
#INCLUDE 'parmtype.ch' //classes importadas do proprio totvs
#INCLUDE 'restful.ch' //classes importadas do proprio totvs
#INCLUDE 'protheus.ch' //classes importadas do proprio totvs


WSRESTFUL CONSULTA DESCRIPTION "Meu Primeiro serviço REST!" //nome do rest dentro da pagina do web service e a descrição.
	WSDATA cCodigo	    AS STRING




	WSMETHOD GET DESCRIPTION "Ola meu web service" WSSYNTAX "/CONSULTA/{codigo}" PATH "/CONSULTA/"  //metodo de requisição e descrição e caminho que vai ser usado
END WSRESTFUL // fim do cabeçalho rest

WSMETHOD GET WSRECEIVE cCodigo WSSERVICE CONSULTA // começa a implementar o method e as consultas desse rest, estamos dizendo que cCodigo vai ser passada via URL pelo metodo GET

//aqui vai receber ps dados que vierem da url


	local cCodigo    := self:CCODIGO//item que vem pela url http://192.168.1.3:xxxx/rest/CONSULTA?CCODIGO=1102S52US1
	local oResponse  := nil
	Local cQuery 	:= ''
	Local oStatement := nil
	Local nSQLParam  := 0

//abaixo estamos montando a query para capturar as informações que precisamos

	cQuery += "SELECT B1_COD, B1_DESC, B2_QATU FROM "+RETSQLTAB("SB1")+" INNER JOIN "+ RETSQLTAB("SB2") +" ON SB1.B1_COD = SB2.B2_COD WHERE" + RETSQLFIL('SB1') +"AND"+ RETSQLFIL('SB2') + "AND SB1.D_E_L_E_T_ = '' AND SB2.D_E_L_E_T_ = ''"+ CRLF
	cQuery += "AND SB1.B1_MSBLQL = 2 "+" AND B1_COD IN ( SELECT Z02_CODSP FROM"+ RETSQLTAB("Z02") +" WHERE "+"SB1.B1_FILIAL = Z02.Z02_FILIAL AND Z02.D_E_L_E_T_ = ''"+ CRLF
	cQuery += " AND Z02_EQUIP = ? ) " + CRLF
	cQuery += "ORDER By B1_DESC"

// pega o parametro que vem da url e seta na query onde tem o ? cada parametro que vem
// e passado pelo nSQLparam++ on de começa em 0 e vai incrementando +1 exemplo 
// parametro 1 primeiro item da url param 2 param++ 

	oStatement := FWPreparedStatement():New()
	oStatement:SetQuery(cQuery)
	nSQLParam++ //implementa o contado do param para evitar sql inject , cada paramentro enviado ganhar um codigo , primneiro param 1 segundao param 2 assim sucessivamente.
	// nesse caso so temos um parametro o codigo entao vai ser 1
	oStatement:SetString(nSQLParam, cCodigo)
	cQuery := oStatement:GetFixQuery()
	conout(cQuery)


	oStatement:Destroy() //
	oStatement := nil
	cAliasSQL := MPSysOpenQuery(cQuery)


	oResponse := JsonObject():New()//cria uma novo objeto json para receber o array oResponse
	oResponse['pecas'] := {} //esse array e criado para recever o array que vai vir do oCliente['']







	conout(cCodigo)// mostra na tela o codigo que veio da variavel cCodigo pela url

	//faz o looping para pegar todas as pecas do equipamento

	Do While (cAliasSQL)->(!eof())


		oCliente   := JsonObject():New() // cria um novo objeto json para receber os dados da query dentro do oCliente


		//recebe os valores  que vem da query 	e monta o array do json
		oCliente['codigo'] :=(cAliasSQL)->B1_COD
		oCliente['desc'] :=EncodeUTF8(RTrim((cAliasSQL)->B1_DESC))
		oCliente['qtdade'] :=(cAliasSQL)->B2_QATU


		aAdd(oResponse['pecas'],oCliente) //estou adicionandi ao oResponse['pecas] tudo qeu o while do oCliente coletou

		(cAliasSQL)->(dbSkip())//percorrre os cAliasSQL pulando de registro em registro
	EndDo


	(cAliasSQL)->(dbCloseArea())// fecha o requisição que foi usada no cAliasSQL

	//json to string



	//define tipo do retorno
	::SetContentType('application/json')//cabeçalho para determinaro tip do arquivo nesse caso um json

	//Define resposta

	//::SetResponse(EncodeUTF8(cResponse))

	::SetResponse(FWJsonSerialize(oResponse,.T.,.F.))// aqui onde vai pegar toda a resposta e passar para o JSON

Return .T.

//apos escrever o dados do web service 
